// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  user
  admin
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  name          String?
  email         String    @unique @db.VarChar(255)
  emailVerified DateTime?
  password      String    @db.VarChar(255)
  image         String?   @db.VarChar(255)
  role          ROLE      @default(user)
  createdAt     DateTime  @default(now())

  recipes       Recipe[]
  favourites    Favourite[]
  comments      Comment[]
  likes         Like[]
  histories     History[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum CATEGORY {
  breakfast
  lunch
  dinner
  dessert
}

enum STATUS {
  pending
  approve
  reject
}

// model Recipe {
//   id       Int    @id @default(autoincrement())
//   user_id  Int
//   user User @relation(fields: [user_id], references: [id])
//   name String @db.VarChar(255)
//   ingredient String @db.Text
//   instruction String @db.Text
//   category CATEGORY
//   pre_cooking_time String @db.VarChar(255)
//   cooking_time String @db.VarChar(255)
//   image String @db.VarChar(255)
//   video_url String @db.VarChar(255)
//   status STATUS
// }

model Recipe {
  id      Int    @id @default(autoincrement())
  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  name             String      @db.VarChar(255)
  ingredient       String      @db.Text
  instruction      String      @db.Text
  category         CATEGORY
  pre_cooking_time String      @db.VarChar(255)
  cooking_time     String      @db.VarChar(255)
  image_url         String      @db.LongText()
  video_url        String?     @db.VarChar(255)
  status           STATUS
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt      @map("updated_at")
  favourites       Favourite[]
  comments         Comment[]
  likes            Like[]
  histories        History[]

  @@map("recipes")
}

model Favourite {
  id        Int    @id @default(autoincrement())
  user_id   String
  user      User   @relation(fields: [user_id], references: [id])
  recipe_id Int
  recipe    Recipe @relation(fields: [recipe_id], references: [id])

  @@map("favourites")
}

model Comment {
  id           Int    @id @default(autoincrement())
  user_id      String
  user         User   @relation(fields: [user_id], references: [id])
  recipe_id    Int
  recipe       Recipe @relation(fields: [recipe_id], references: [id])
  comment_text String @db.Text

  @@map("comments")
}

model Like {
  id        Int    @id @default(autoincrement())
  user_id   String
  user      User   @relation(fields: [user_id], references: [id])
  recipe_id Int
  recipe    Recipe @relation(fields: [recipe_id], references: [id])

  @@map("likes")
}

enum ACTION {
  created
  liked
  commented
}

model History {
  id          Int    @id @default(autoincrement())
  user_id     String
  user        User   @relation(fields: [user_id], references: [id])
  recipe_id   Int
  recipe      Recipe @relation(fields: [recipe_id], references: [id])
  action_type ACTION

  @@map("histories")
}
